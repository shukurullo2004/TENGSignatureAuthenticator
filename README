# TENG-Based Signature Authentication System

[![Python](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Status](https://img.shields.io/badge/status-working-brightgreen.svg)](README.md)

A novel biometric authentication system that uses Triboelectric Nanogenerator (TENG) voltage signatures to identify individuals based on their unique handwriting patterns. This system combines energy harvesting with machine learning to create a self-powered, secure authentication solution.

## 📋 Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Results](#results)
- [Technical Details](#technical-details)
- [Contributing](#contributing)
- [License](#license)
- [Authors](#authors)

## 🔬 Overview

This project demonstrates a breakthrough in sustainable biometric authentication by leveraging TENG technology to capture unique electrical signatures generated during handwriting. Each person's biomechanical writing patterns create distinct voltage characteristics that can be used for reliable user identification.

### Key Innovation
- **First TENG-based signature authentication system**
- **Self-powered operation** (no external batteries required)
- **99.4% authentication confidence** with proper threshold tuning
- **Real-time processing** capability (<1 second authentication)

## ✨ Features

- **🔐 Biometric Authentication**: Identify users through unique handwriting voltage patterns
- **⚡ Self-Powered**: TENG technology eliminates need for external power
- **📊 Advanced Analytics**: 21 unique features extracted from voltage time-series data
- **📈 Comprehensive Visualization**: 16+ analysis plots showing user uniqueness
- **🤖 Machine Learning**: Multi-metric similarity analysis with adjustable thresholds
- **📱 Real-time Processing**: Fast authentication decisions
- **🔧 Easy Integration**: Modular design for various applications

## 🛠️ Installation

### Prerequisites
- Python 3.8 or higher
- pip package manager

### Setup
1. **Clone the repository**
   ```bash
   git clone https://github.com/[username]/teng-signature-authentication.git
   cd teng-signature-authentication
   ```

2. **Create virtual environment** (recommended)
   ```bash
   python -m venv myenv
   source myenv/bin/activate  # On Windows: myenv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

### Required Packages
```
pandas>=1.3.0
numpy>=1.21.0
matplotlib>=3.4.0
scikit-learn>=1.0.0
scipy>=1.7.0
openpyxl>=3.0.0
```

## 🚀 Usage

### Quick Start
1. **Prepare your data**: Place Excel files with TENG voltage data in `hand_written_data/` folder
   - Format: Column A = timestamps, Column B = voltages
   - Files: `person_1.xlsx`, `person_2.xlsx`, `person_3.xlsx`, etc.

2. **Run the authentication system**
   ```bash
   python main.py
   ```

3. **View results**: Check console output and generated plots in `plots/` directory

### Data Format
Your Excel files should contain:
- **Column A**: Timestamps (seconds)
- **Column B**: Voltage values (volts)

Example data structure:
```
Time (s)  | Voltage (V)
----------|------------
0.003721  | -0.80
0.007562  |  0.80
0.011402  | -0.40
0.015242  |  1.00
...       | ...
```

### Custom Usage
```python
from main import TENGSignatureAuthenticator

# Initialize system
auth = TENGSignatureAuthenticator()

# Load and train user profiles
timestamps, voltages = auth.load_excel_data('user_data.xlsx')
auth.train_user_profile('User1', timestamps, voltages)

# Authenticate new signature
is_authentic, score, status = auth.authenticate_signature('User1', test_timestamps, test_voltages)
print(f"Authentication: {status}, Score: {score:.3f}")
```

## 📊 Results

### Performance Metrics
- **Self-Authentication Accuracy**: 100% (perfect recognition of legitimate users)
- **Cross-Authentication**: Successfully detects imposters with proper threshold
- **Processing Speed**: <1 second per authentication
- **Feature Extraction**: 21 unique characteristics per signature

### User Differentiation
| User | Voltage Range | Writing Style | Unique Characteristics |
|------|---------------|---------------|----------------------|
| Person 1 | 10.80V | Aggressive | High positive voltage peaks |
| Person 2 | 11.20V | Dynamic | Largest voltage swings |
| Person 3 | 6.20V | Gentle | Smooth, controlled patterns |

### Generated Analysis
The system automatically generates 16+ analysis plots:
- Individual voltage patterns
- Feature comparison charts
- User similarity matrices
- Statistical difference analysis
- Pattern recognition visualizations

## 🔧 Technical Details

### Algorithm Architecture
```
TENG Sensor → Voltage Signals → Feature Extraction → Pattern Analysis → Authentication Decision
```

### Feature Extraction (21 Features)
- **Statistical**: Mean, std, variance, skewness, kurtosis
- **Temporal**: Duration, sampling rate, change rates
- **Pattern**: Peaks, zero crossings, energy analysis
- **Signal**: RMS voltage, signal energy, frequency characteristics

### Similarity Metrics
- **Cosine Similarity**: Geometric relationship (70% weight)
- **Pattern Matching**: Temporal alignment (30% weight)
- **Dynamic Time Warping**: Sequence comparison
- **Euclidean Distance**: Spatial separation analysis

### Security Thresholds
- **High Security**: 0.90-0.95 (financial applications)
- **Medium Security**: 0.80-0.85 (general access)
- **Current Default**: 0.65 (development/testing)

## 📈 Applications

### Immediate Use Cases
- **Secure Document Signing**: Digital signature verification
- **Access Control**: Building entry, computer login
- **Mobile Authentication**: Smartphone security enhancement
- **IoT Security**: Self-powered sensor authentication

### Commercial Potential
- **Banking & Finance**: Secure transaction verification
- **Healthcare**: Patient identification systems
- **Government**: Document authentication
- **Enterprise**: Employee access control

## 📁 Project Structure

```
teng-signature-authentication/
├── main.py                     # Main authentication system
├── requirements.txt            # Python dependencies
├── README.md                  # This file
├── hand_written_data/         # Input data directory
│   ├── person_1.xlsx         # User 1 TENG data
│   ├── person_2.xlsx         # User 2 TENG data
│   └── person_3.xlsx         # User 3 TENG data
├── plots/                     # Generated analysis plots
│   ├── 01_key_features_comparison.png
│   ├── 02_voltage_range_comparison.png
│   └── ...                   # Additional analysis plots
└── docs/                      # Documentation
    └── detailed_report.md     # Comprehensive analysis report
```

## 📖 Documentation

### Detailed Analysis Report
For comprehensive technical details, methodology, and results analysis, see our [detailed report](https://docs.google.com/document/d/1CCZdabr3aQ_VxCC8_OKZP2y-N0M409UChRQo-gprmVY/edit?usp=sharing).

### Academic Context
This project was developed as part of the **Digital Signal Processing** course, demonstrating practical applications of signal analysis, pattern recognition, and machine learning in emerging nanotechnology applications.

## 🔬 Research Significance

### Novel Contributions
- **First implementation** of TENG-based biometric authentication
- **Mathematical proof** of individual signature uniqueness
- **Self-powered security system** for sustainable IoT applications
- **Interdisciplinary approach** combining nanotechnology and machine learning

### Future Development
- [ ] Large-scale user testing (100+ individuals)
- [ ] Mobile application development
- [ ] Hardware optimization for commercial deployment
- [ ] Patent application for TENG authentication method
- [ ] Academic paper submission

## 🤝 Contributing

We welcome contributions to improve the TENG authentication system! Here's how you can help:

### How to Contribute
1. **Fork the repository**
2. **Create a feature branch**: `git checkout -b feature/amazing-feature`
3. **Make your changes** and test thoroughly
4. **Commit your changes**: `git commit -m 'Add amazing feature'`
5. **Push to the branch**: `git push origin feature/amazing-feature`
6. **Open a Pull Request**

### Areas for Contribution
- **Algorithm optimization**: Improve authentication accuracy
- **Feature engineering**: Add new discriminative features
- **Visualization enhancement**: Create better analysis plots
- **Documentation**: Improve code comments and guides
- **Testing**: Add unit tests and validation scripts
- **Hardware integration**: TENG sensor interfacing

### Bug Reports
If you find a bug, please open an issue with:
- Description of the problem
- Steps to reproduce
- Expected vs actual behavior
- System information (OS, Python version)

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 👥 Authors

### Course Information
- **Course**: Digital Signal Processing
- **Professor**: Kakani Vijay
- **Institution**: [University Name]
- **Academic Year**: 2024-2025

### Development Team
- **[Shukurullo Meliboev](https://github.com/[username])** - Lead Developer & Researcher
  - System architecture and implementation
  - Machine learning algorithm development
  - Data analysis and visualization
  
- **[Ilhomov Mansurjon](https://github.com/[username])** - Contributor
  - Feature engineering
  - Testing and validation
  - Documentation support

## 📞 Contact

For questions, suggestions, or collaboration opportunities:

- **Email**: [your.email@example.com]
- **LinkedIn**: [Your LinkedIn Profile]
- **Project Issues**: [GitHub Issues Page](https://github.com/[username]/teng-signature-authentication/issues)

## 🙏 Acknowledgments

- **Professor Kakani Vijay** for guidance and support
- **TENG research community** for foundational work in triboelectric nanogenerators
- **Digital Signal Processing course** for providing the academic framework
- **Open source community** for excellent Python libraries used in this project

## 📊 Project Status

- ✅ **Core Algorithm**: Completed and tested
- ✅ **Feature Extraction**: 21 features implemented
- ✅ **Visualization**: 16+ analysis plots generated
- ✅ **Documentation**: Comprehensive report available
- 🔄 **Optimization**: Ongoing threshold tuning
- 📋 **Future Work**: Mobile app development, large-scale testing

---

**⭐ If you find this project useful, please consider giving it a star!**

**🔗 For detailed technical analysis, visit our [comprehensive report](https://docs.google.com/document/d/1CCZdabr3aQ_VxCC8_OKZP2y-N0M409UChRQo-gprmVY/edit?usp=sharing)**